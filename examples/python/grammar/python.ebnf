@@whitespace :: /((?![\r\n])\s)+/
@@eol_comments :: /#[^\r\n]*/

single_input
    =
    NEWLINE | simple_stmt | compound_stmt NEWLINE
    ;


file_input
    =
    {NEWLINE | @:stmt}
    ;


eval_input
    =
    {NEWLINE} testlist {NEWLINE}
    ;


decorators
    =
    {decorator}+
    ;


decorator
    =
    '@' dotted_attr ['(' [arglist] ')'] NEWLINE
    ;


dotted_attr
    =
    NAME {'.' NAME}
    ;


funcdef
    =
    [decorators] 'def' NAME parameters ':' suite
    ;


parameters
    =
    '(' [varargslist] ')'
    ;


varargslist
    =
        defparameter
        {(',' defparameter)}
        [','
        [
        '*' NAME [',' '**' NAME] | '**' NAME
        ]
        ]
    |
        '*' NAME [',' '**' NAME]
    |
        '**' NAME
    ;


defparameter
    =
    fpdef ['=' test]
    ;


fpdef
    =
    NAME | '(' fplist ')'
    ;


fplist
    =
    fpdef {(',' fpdef)} [',']
    ;


stmt
    =
    simple_stmt | compound_stmt
    ;


simple_stmt
    =
    small_stmt {(';' small_stmt)} [';'] NEWLINE
    ;


small_stmt
    =
      expr_stmt
    | print_stmt
    | del_stmt
    | pass_stmt
    | flow_stmt
    | import_stmt
    | global_stmt
    | exec_stmt
    | assert_stmt
    ;


expr_stmt
    =
    testlist
    [
    augassign yield_expr | augassign testlist | assigns
    ]
    ;


assigns
    =
    {assign_testlist}+ | {assign_yield}+
    ;


assign_testlist
    =
    '=' testlist
    ;


assign_yield
    =
    '=' yield_expr
    ;


augassign
    =
      '+='
    | '-='
    | '*='
    | '/='
    | '%='
    | '&='
    | '|='
    | '^='
    | '<<='
    | '>>='
    | '**='
    | '//='
    ;


print_stmt
    =
    'print'
    [
    printlist | '>>' printlist
    ]
    ;


printlist
    =
    test {(',' test)} [',']
    ;


del_stmt
    =
    'del' exprlist
    ;


pass_stmt
    =
    'pass'
    ;


flow_stmt
    =
    break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
    ;


break_stmt
    =
    'break'
    ;


continue_stmt
    =
    'continue'
    ;


return_stmt
    =
    'return' [testlist]
    ;


yield_stmt
    =
    yield_expr
    ;


raise_stmt
    =
    'raise' [test [',' test [',' test]]]
    ;


import_stmt
    =
    import_name | import_from
    ;


import_name
    =
    'import' dotted_as_names
    ;


import_from
    =
    'from'
    ({'.'} dotted_name | {'.'}+)
    'import'
    ('*' | import_as_names | '(' import_as_names ')')
    ;


import_as_names
    =
    import_as_name {',' import_as_name} [',']
    ;


import_as_name
    =
    NAME ['as' NAME]
    ;


dotted_as_name
    =
    dotted_name ['as' NAME]
    ;


dotted_as_names
    =
    dotted_as_name {',' dotted_as_name}
    ;


dotted_name
    =
    NAME {'.' NAME}
    ;


global_stmt
    =
    'global' NAME {',' NAME}
    ;


exec_stmt
    =
    'exec' expr ['in' test [',' test]]
    ;


assert_stmt
    =
    'assert' test [',' test]
    ;


compound_stmt
    =
      if_stmt
    | while_stmt
    | for_stmt
    | try_stmt
    | with_stmt
    | funcdef
    | classdef
    ;


if_stmt
    =
    'if' test ':' suite {elif_clause} ['else' ':' suite]
    ;


elif_clause
    =
    'elif' test ':' suite
    ;


while_stmt
    =
    'while' test ':' suite ['else' ':' suite]
    ;


for_stmt
    =
    'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
    ;


try_stmt
    =
    'try'
    ':'
    suite
    (
          {except_clause}+ ['else' ':' suite] ['finally' ':' suite]
        | 'finally' ':' suite
    )
    ;


with_stmt
    =
    'with' test [with_var] ':' suite
    ;


with_var
    =
    ('as' | NAME) expr
    ;


except_clause
    =
    'except' [test [',' test]] ':' suite
    ;


suite
    =
    simple_stmt | NEWLINE INDENT {stmt}+ DEDENT
    ;


INDENT
    =
    /^((?![\r\n])\s)+/
    ;


DEDENT
    =
    /^((?![\r\n])\s)+/
    ;


test
    =
    or_test ['if' or_test 'else' test] | lambdef
    ;


or_test
    =
    and_test {'or' and_test}
    ;


and_test
    =
    not_test {'and' not_test}
    ;


not_test
    =
    'not' not_test | comparison
    ;


comparison
    =
    expr {comp_op expr}
    ;


comp_op
    =
      '<='
    | '<>'
    | '<'
    | '>='
    | '>'
    | '=='
    | '!='
    | 'in'
    | 'not' 'in'
    | 'is' 'not'
    | 'is'
    ;


expr
    =
    xor_expr {'|' xor_expr}
    ;


xor_expr
    =
    and_expr {'^' and_expr}
    ;


and_expr
    =
    shift_expr {'&' shift_expr}
    ;


shift_expr
    =
    arith_expr {('<<' | '>>') arith_expr}
    ;


arith_expr
    =
    term {('+' | '-') term}
    ;


term
    =
    factor {('*' | '/' | '%' | '//') factor}
    ;


factor
    =
    '+' factor | '-' factor | '~' factor | power
    ;


power
    =
    atom {trailer} ['**' factor]
    ;


atom
    =
        '('
        [
        yield_expr | testlist_gexp
        ]

        ')'
    |
        '[' [listmaker] ']'
    |
        '{' [dictmaker] '}'
    |
        '`' testlist '`'
    |
        NAME
    |
        INT
    |
        LONGINT
    |
        FLOAT
    |
        COMPLEX
    |
        {STRING}+
    ;


listmaker
    =
    test (list_for | {(',' test)}) [',']
    ;


testlist_gexp
    =
    test ({(',' test)} [','] | gen_for)
    ;


lambdef
    =
    'lambda' [varargslist] ':' test
    ;


trailer
    =
    '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
    ;


subscriptlist
    =
    subscript {(',' subscript)} [',']
    ;


subscript
    =
    '.' '.' '.' | test [':' [test] [sliceop]] | ':' [test] [sliceop]
    ;


sliceop
    =
    ':' [test]
    ;


exprlist
    =
    expr {(',' expr)} [',']
    ;


testlist
    =
    test {(',' test)} [',']
    ;


dictmaker
    =
    test ':' test {(',' test ':' test)} [',']
    ;


classdef
    =
    'class' NAME ['(' [testlist] ')'] ':' suite
    ;


arglist
    =
        argument
        {',' argument}
        [','
        [
        '*' test [',' '**' test] | '**' test
        ]
        ]
    |
        '*' test [',' '**' test]
    |
        '**' test
    ;


argument
    =
    test
    [
    ('=' test) | gen_for
    ]
    ;


list_iter
    =
    list_for | list_if
    ;


list_for
    =
    'for' exprlist 'in' testlist [list_iter]
    ;


list_if
    =
    'if' test [list_iter]
    ;


gen_iter
    =
    gen_for | gen_if
    ;


gen_for
    =
    'for' exprlist 'in' or_test [gen_iter]
    ;


gen_if
    =
    'if' test [gen_iter]
    ;


yield_expr
    =
    'yield' [testlist]
    ;


FLOAT
    =
    /(\.[0-9]+|[0-9]+\.[0-9]*)([Ee][0-9]+)?/
    ;


LONGINT
    =
    INT /[lL]/
    ;


INT
    =
    /0[xX][0-9a-fA-F]+|0[0-9]+|[1-9][0-9]*/
    ;


COMPLEX
    =
    (FLOAT|INT) /[jJ]/
    ;


NAME
    =
    /(?!\d)\w+/
    ;


STRING
    =
    kind:/('r'|'u'|'ur'|'f')/
    (
    '"""' value:/([^"]|\"|""(?!")|[\r\n])*/ '"""'
    |
    "'''" value:/([^']|\'|''(?!')|[\r\n])*/ "'''"
    |
    '"' value:/([^"\n]|\")*/ '"'
    |
    "'" value:/([^'\n]|'')*/ "'"
    )
    ;


NEWLINE
    =
    /[\u000C\r\n]+/
    ;
