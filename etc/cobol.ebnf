cobol_source_program
    =
    ('IDENTIFICATION'|'ID') 'DIVISION' '.' program_id_cobol_source_program [identification_division_content] ['ENVIRONMENT' 'DIVISION' '.' environment_division_content] ['DATA' 'DIVISION' '.' data_division_content] [procedure_division] [{nested_cobol_source_program} 'END' 'PROGRAM' program_name '.']
    ;

program_id_cobol_source_program
    =
    'PROGRAM-ID' ['.'] program_name [['IS'] 'INITIAL' ['PROGRAM']] ['.']
    ;

nested_cobol_source_program
    =
    ('IDENTIFICATION'|'ID') 'DIVISION' '.' program_id_nested_cobol_source_program [identification_division_content] ['ENVIRONMENT' 'DIVISION' '.' environment_division_content] ['DATA' 'DIVISION' '.' data_division_content] [procedure_division] {nested_cobol_source_program} 'END' 'PROGRAM' program_name '.'
    ;

program_id_nested_cobol_source_program
    =
    'PROGRAM-ID' ['.'] program_name [['IS'] ('COMMON' ['INITIAL']|'INITIAL' ['COMMON']) ['PROGRAM']] ['.']
    ;

identification_division_content
    =
    ({['AUTHOR' ['.'] {comment_entry}]|['INSTALLATION' ['.'] {comment_entry}]|['DATE-WRITTEN' ['.'] {comment_entry}]|['DATE-COMPILED' ['.'] {comment_entry}]|['SECURITY' ['.'] {comment_entry}]})
    ;

environment_division_content
    =
    [configuration_section] [input_output_section]
    ;

configuration_section
    =
    'CONFIGURATION' 'SECTION' '.' configuration_section_paragraphs
    ;

configuration_section_paragraphs
    =
    [source_computer_paragraph] [object_computer_paragraph] [special_names_paragraph]
    ;

source_computer_paragraph
    =
    'SOURCE-COMPUTER' '.' [computer_name [['WITH'] 'DEBUGGING' 'MODE'] '.']
    ;

object_computer_paragraph
    =
    'OBJECT-COMPUTER' '.' [computer_name ['MEMORY' ['SIZE'] integer ('WORDS'|'CHARACTERS'|'MODULES')] object_computer_paragraph_sequence_phrase '.']
    ;

object_computer_paragraph_sequence_phrase
    =
    [['PROGRAM'] ['COLLATING'] 'SEQUENCE' ['IS'] alphabet_name] ['SEGMENT-LIMIT' ['IS'] priority_number]
    ;

special_names_paragraph
    =
    'SPECIAL-NAMES' '.' {(environment_name ['IS'] mnemonic_name|environment_name (['IS'] mnemonic_name [special_names_paragraph_status_phrase]|special_names_paragraph_status_phrase))} special_names_paragraph_clauses ['.']
    ;

special_names_paragraph_clauses
    =
    ({{alphabet_clause}|{symbolic_characters_clause}|{class_clause}|[currency_sign_clause]|[decimal_point_clause]})
    ;

alphabet_clause
    =
    'ALPHABET' alphabet_name ['IS'] ('STANDARD-1'|'STANDARD-2'|'NATIVE'|'EBCDIC'|{literal [(('THROUGH'|'THRU') literal|{'ALSO' literal}+)]}+)
    ;

symbolic_characters_clause
    =
    'SYMBOLIC' ['CHARACTERS'] {{symbolic_character}+ [('ARE'|'IS')] {integer}+}+ ['IN' alphabet_name]
    ;

class_clause
    =
    'CLASS' class_name ['IS'] {literal [('THROUGH'|'THRU') literal]}+
    ;

currency_sign_clause
    =
    'CURRENCY' ['SIGN'] ['IS'] literal
    ;

decimal_point_clause
    =
    'DECIMAL-POINT' ['IS'] 'COMMA'
    ;

special_names_paragraph_status_phrase
    =
    ('ON' ['STATUS'] ['IS'] condition ['OFF' ['STATUS'] ['IS'] condition]|'OFF' ['STATUS'] ['IS'] condition ['ON' ['STATUS'] ['IS'] condition])
    ;

input_output_section
    =
    'INPUT-OUTPUT' 'SECTION' '.' [file_control_paragraph] [i_o_control_paragraph]
    ;

file_control_paragraph
    =
    'FILE-CONTROL' '.' {file_control_entry}
    ;

file_control_entry
    =
    select_clause assign_clause ({[reserve_clause]|[['ORGANIZATION' ['IS']] 'SEQUENTIAL']|[padding_character_clause]|[record_delimiter_clause]|['ACCESS' ['MODE'] ['IS'] 'SEQUENTIAL']|[password_clause]|[file_status_clause]}) '.'
    ;

file_control_entry
    =
    select_clause assign_clause ({[reserve_clause]|['ORGANIZATION' ['IS']] 'RELATIVE'|['ACCESS' ['MODE'] ['IS'] ('SEQUENTIAL' [relative_key_clause]|('RANDOM'|'DYNAMIC') relative_key_clause)]|[password_clause]|[file_status_clause]}) '.'
    ;

file_control_entry
    =
    select_clause assign_clause ({[reserve_clause]|['ORGANIZATION' ['IS']] 'INDEXED'|['ACCESS' ['MODE'] ['IS'] ('SEQUENTIAL'|'RANDOM'|'DYNAMIC')]|record_key_clause|[password_clause]|{alternate_record_key_clause}|[file_status_clause]}) '.'
    ;

select_clause
    =
    'SELECT' ['OPTIONAL'] file_name
    ;

assign_clause
    =
    'ASSIGN' ['TO'] {(assignment_name|literal)}+
    ;

reserve_clause
    =
    'RESERVE' integer [('AREA'|'AREAS')]
    ;

padding_character_clause
    =
    'PADDING' ['CHARACTER'] ['IS'] (qualified_data_name|literal)
    ;

record_delimiter_clause
    =
    'RECORD' 'DELIMITER' ['IS'] ('STANDARD-1'|assignment_name)
    ;

record_key_clause
    =
    'RECORD' ['KEY'] ['IS'] qualified_data_name
    ;

alternate_record_key_clause
    =
    'ALTERNATE' ['RECORD'] ['KEY'] ['IS'] qualified_data_name [password_clause] [['WITH'] 'DUPLICATES']
    ;

relative_key_clause
    =
    'RELATIVE' ['KEY'] ['IS'] qualified_data_name
    ;

password_clause
    =
    'PASSWORD' ['IS'] data_name
    ;

file_status_clause
    =
    ['FILE'] 'STATUS' ['IS'] qualified_data_name [qualified_data_name]
    ;

i_o_control_paragraph
    =
    'I-O-CONTROL' '.' [{(qsam_or_sam_i_o_control_entries|sam_i_o_control_entries)}+ '.'] [sort_merge_i_o_control_entries '.']
    ;

qsam_or_sam_i_o_control_entries
    =
    ('RERUN' 'ON' (assignment_name|file_name) ['EVERY'] (integer 'RECORDS'|'END' ['OF'] ('REEL'|'UNIT')) ['OF'] file_name|'SAME' ['RECORD'] ['AREA'] ['FOR'] file_name {file_name}+|'MULTIPLE' 'FILE' ['TAPE'] ['CONTAINS'] {file_name ['POSITION' integer]}+|'APPLY' 'WRITE-ONLY' ['ON'] {file_name}+)
    ;

sam_i_o_control_entries
    =
    ('RERUN' 'ON' (assignment_name|file_name) ['EVERY'] integer 'RECORDS' ['OF'] file_name|'SAME' ['RECORD'] ['AREA'] ['FOR'] file_name {file_name}+)
    ;

sort_merge_i_o_control_entries
    =
    ['RERUN' 'ON' assignment_name] {'SAME' ('RECORD'|'SORT'|'SORT-MERGE') ['AREA'] ['FOR'] file_name {file_name}+}+
    ;

data_division_content
    =
    ['FILE' 'SECTION' '.' {file_and_sort_description_entry {record_description_entry}+}] ['WORKING-STORAGE' 'SECTION' '.' {(record_description_entry|data_item_description_entry)}] ['LINKAGE' 'SECTION' '.' {(record_description_entry|data_item_description_entry)}]
    ;

data_item_description_entry
    =
    data_description_entry
    ;

record_description_entry
    =
    data_description_entry
    ;

file_and_sort_description_entry
    =
    ('FD'|'SD') file_name file_and_sort_description_entry_clauses '.'
    ;

file_and_sort_description_entry_clauses
    =
    ({[external_clause]|[global_clause]|[block_contains_clause]|[record_clause]|[label_records_clause]|[alue_of_clause]|[data_records_clause]|[linage_clause]|[recording_mode_clause]|[code_set_clause]})
    ;

external_clause
    =
    ['IS'] 'EXTERNAL'
    ;

global_clause
    =
    ['IS'] 'GLOBAL'
    ;

block_contains_clause
    =
    'BLOCK' ['CONTAINS'] [(integer|zero) 'TO'] (integer|zero) [('CHARACTERS'|'RECORDS')]
    ;

record_clause
    =
    'RECORD' (['CONTAINS'] (integer|zero) ['CHARACTERS']|['CONTAINS'] (integer|zero) 'TO' (integer|zero) ['CHARACTERS']|record_varying_phrase ['DEPENDING' ['ON'] data_name])
    ;

record_varying_phrase
    =
    ['IS'] 'VARYING' ['IN'] ['SIZE'] [['FROM'] integer] ['TO' integer] ['CHARACTERS']
    ;

label_records_clause
    =
    'LABEL' ('RECORD' ['IS']|'RECORDS' ['ARE']) ('STANDARD'|'OMITTED'|{data_name}+)
    ;

alue_of_clause
    =
    'VALUE' 'OF' {system_name ['IS'] (qualified_data_name|literal)}+
    ;

data_records_clause
    =
    'DATA' ('RECORD' ['IS']|'RECORDS' ['ARE']) {data_name}+
    ;

linage_clause
    =
    'LINAGE' ['IS'] (data_name|integer) ['LINES'] linage_footing_phrase
    ;

linage_footing_phrase
    =
    [['WITH'] 'FOOTING' ['AT'] (data_name|integer)] [['LINES'] ['AT'] 'TOP' (data_name|integer)] [['LINES'] ['AT'] 'BOTTOM' (data_name|integer)]
    ;

recording_mode_clause
    =
    'RECORDING' ['MODE'] ['IS'] mode
    ;

code_set_clause
    =
    'CODE-SET' ['IS'] alphabet_name
    ;

data_description_entry
    =
    level_number [(data_name|'FILLER')] data_description_entry_clauses '.'
    ;

data_description_entry
    =
    '66' data_name renames_clause '.'
    ;

data_description_entry
    =
    '88' condition_name condition_value_clause '.'
    ;

data_description_entry_clauses
    =
    ({[redefines_clause]|[blank_when_zero_clause]|[external_clause]|[global_clause]|[justified_clause]|[occurs_clause]|[picture_clause]|[sign_clause]|[synchronized_clause]|[usage_clause]|[data_value_clause]})
    ;

redefines_clause
    =
    'REDEFINES' data_name
    ;

blank_when_zero_clause
    =
    'BLANK' ['WHEN'] ('ZERO'|'ZEROS'|'ZEROES')
    ;

justified_clause
    =
    ('JUSTIFIED'|'JUST') ['RIGHT']
    ;

occurs_clause
    =
    'OCCURS' integer ['TIMES'] {('ASCENDING'|'DESCENDING') ['KEY'] ['IS'] {qualified_data_name}+} ['INDEXED' ['BY'] {index_name}+]
    ;

occurs_clause
    =
    'OCCURS' [(integer|zero) 'TO'] integer ['TIMES'] 'DEPENDING' ['ON'] qualified_data_name {('ASCENDING'|'DESCENDING') ['KEY'] ['IS'] {qualified_data_name}+} ['INDEXED' ['BY'] {index_name}+]
    ;

picture_clause
    =
    ('PICTURE'|'PIC') ['IS'] picture_string
    ;

sign_clause
    =
    ['SIGN' ['IS']] ('LEADING'|'TRAILING') ['SEPARATE' ['CHARACTER']]
    ;

synchronized_clause
    =
    ('SYNCHRONIZED'|'SYNC') [('LEFT'|'RIGHT')]
    ;

usage_clause
    =
    ['USAGE' ['IS']] ('BINARY'|'COMP'|'COMP-1'|'COMP-2'|'COMP-3'|'COMP-4'|'COMPUTATIONAL'|'COMPUTATIONAL-1'|'COMPUTATIONAL-2'|'COMPUTATIONAL-3'|'COMPUTATIONAL-4'|'DISPLAY'|'DISPLAY-1'|'INDEX'|'PACKED-DECIMAL'|'POINTER')
    ;

condition_value_clause
    =
    ('VALUE' ['IS']|'VALUES' ['ARE']) {literal [('THROUGH'|'THRU') literal]}+
    ;

data_value_clause
    =
    'VALUE' ['IS'] literal
    ;

renames_clause
    =
    'RENAMES' qualified_data_name [('THROUGH'|'THRU') qualified_data_name]
    ;

procedure_division
    =
    'PROCEDURE' 'DIVISION' ['USING' {data_name}+] '.' ['DECLARATIVES' '.' {section_header '.' use_statement '.' paragraphs}+ 'END' 'DECLARATIVES' '.'] sections
    ;

procedure_division
    =
    'PROCEDURE' 'DIVISION' ['USING' {data_name}+] '.' paragraphs
    ;

sections
    =
    paragraphs {section_header '.' paragraphs}
    ;

section_header
    =
    section_name 'SECTION' [priority_number]
    ;

paragraphs
    =
    {sentence} {paragraph}
    ;

paragraph
    =
    paragraph_name '.' {sentence}
    ;

paragraph
    =
    altered_goto
    ;

sentence
    =
    statement_list '.'
    ;

statement_list
    =
    {statement}+
    ;

statement
    =
    (accept_statement|add_statement|alter_statement|call_statement|cancel_statement|close_statement|compute_statement|continue_statement|delete_statement|display_statement|divide_statement|entry_statement|evaluate_statement|exit_statement|exit_program_statement|goback_statement|go_to_statement|if_statement|initialize_statement|inspect_statement|merge_statement|move_statement|multiply_statement|open_statement|perform_statement|read_statement|release_statement|return_statement|rewrite_statement|search_statement|set_statement|sort_statement|start_statement|stop_statement|string_statement|subtract_statement|unstring_statement|write_statement)
    ;

accept_statement
    =
    'ACCEPT' identifier ['FROM' (mnemonic_name|environment_name)]
    ;

accept_statement
    =
    'ACCEPT' identifier 'FROM' ('DATE'|'DAY'|'DAY-OF-WEEK'|'TIME')
    ;

add_statement
    =
    'ADD' {(identifier|literal)}+ 'TO' {identifier ['ROUNDED']}+ [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-ADD']
    ;

add_statement
    =
    'ADD' {(identifier|literal)}+ ['TO'] (identifier|literal) 'GIVING' {identifier ['ROUNDED']}+ [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-ADD']
    ;

add_statement
    =
    'ADD' ('CORRESPONDING'|'CORR') identifier 'TO' identifier ['ROUNDED'] [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-ADD']
    ;

alter_statement
    =
    'ALTER' {procedure_name 'TO' ['PROCEED' 'TO'] procedure_name}+
    ;

call_statement
    =
    'CALL' (identifier|literal) ['USING' {([['BY'] 'REFERENCE'] {(identifier|'ADDRESS' 'OF' identifier|file_name)}+|['BY'] 'CONTENT' {(['LENGTH' 'OF'] identifier|'ADDRESS' 'OF' identifier|literal)}+)}+] [['ON'] 'OVERFLOW' statement_list] ['END-CALL']
    ;

call_statement
    =
    'CALL' (identifier|literal) ['USING' {([['BY'] 'REFERENCE'] {(identifier|'ADDRESS' 'OF' identifier|file_name)}+|['BY'] 'CONTENT' {(['LENGTH' 'OF'] identifier|'ADDRESS' 'OF' identifier|literal)}+)}+] [['ON'] 'EXCEPTION' statement_list] ['NOT' ['ON'] 'EXCEPTION' statement_list] ['END-CALL']
    ;

cancel_statement
    =
    'CANCEL' {(identifier|literal)}+
    ;

close_statement
    =
    'CLOSE' {file_name [(('REEL'|'UNIT') [(['FOR'] 'REMOVAL'|['WITH'] 'NO' 'REWIND')]|['WITH'] ('NO' 'REWIND'|'LOCK'))]}+
    ;

close_statement
    =
    'CLOSE' {file_name [['WITH'] 'LOCK']}+
    ;

compute_statement
    =
    'COMPUTE' {identifier ['ROUNDED']}+ ('='|'EQUAL') arithmetic_expression [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-COMPUTE']
    ;

continue_statement
    =
    'CONTINUE'
    ;

delete_statement
    =
    'DELETE' file_name ['RECORD'] ['INVALID' ['KEY'] statement_list] ['NOT' 'INVALID' ['KEY'] statement_list] ['END-DELETE']
    ;

display_statement
    =
    'DISPLAY' {(identifier|literal)}+ ['UPON' (mnemonic_name|environment_name)] [['WITH'] 'NO' 'ADVANCING']
    ;

divide_statement
    =
    'DIVIDE' (identifier|literal) 'INTO' {identifier ['ROUNDED']}+ [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-DIVIDE']
    ;

divide_statement
    =
    'DIVIDE' (identifier|literal) 'INTO' (identifier|literal) 'GIVING' {identifier ['ROUNDED']}+ [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-DIVIDE']
    ;

divide_statement
    =
    'DIVIDE' (identifier|literal) 'BY' (identifier|literal) 'GIVING' {identifier ['ROUNDED']}+ [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-DIVIDE']
    ;

divide_statement
    =
    'DIVIDE' (identifier|literal) 'INTO' (identifier|literal) 'GIVING' identifier ['ROUNDED'] 'REMAINDER' identifier [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-DIVIDE']
    ;

divide_statement
    =
    'DIVIDE' (identifier|literal) 'BY' (identifier|literal) 'GIVING' identifier ['ROUNDED'] 'REMAINDER' identifier [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-DIVIDE']
    ;

entry_statement
    =
    'ENTRY' literal ['USING' {data_name}+]
    ;

evaluate_statement
    =
    'EVALUATE' (identifier|literal|arithmetic_expression|condition|'TRUE'|'FALSE') {'ALSO' (identifier|literal|arithmetic_expression|condition|'TRUE'|'FALSE')} {{'WHEN' evaluate_phrase {'ALSO' evaluate_phrase}}+ statement_list}+ ['WHEN' 'OTHER' statement_list] ['END-EVALUATE']
    ;

evaluate_phrase
    =
    ('ANY'|condition|'TRUE'|'FALSE'|['NOT'] (identifier|literal|arithmetic_expression) [('THROUGH'|'THRU') (identifier|literal|arithmetic_expression)])
    ;

exit_statement
    =
    'EXIT'
    ;

exit_program_statement
    =
    'EXIT' 'PROGRAM'
    ;

goback_statement
    =
    'GOBACK'
    ;

go_to_statement
    =
    'GO' ['TO'] procedure_name
    ;

go_to_statement
    =
    'GO' ['TO'] 'MORE-LABELS'
    ;

go_to_statement
    =
    'GO' ['TO'] {procedure_name}+ 'DEPENDING' ['ON'] identifier
    ;

altered_goto
    =
    paragraph_name '.' 'GO' ['TO'] '.'
    ;

if_statement
    =
    'IF' condition ['THEN'] ({statement}+|'NEXT' 'SENTENCE') ['ELSE' ({statement}+|'NEXT' 'SENTENCE')] ['END-IF']
    ;

initialize_statement
    =
    'INITIALIZE' {identifier}+ ['REPLACING' {('ALPHABETIC'|'ALPHANUMERIC'|'NUMERIC'|'ALPHANUMERIC-EDITED'|'NUMERIC-EDITED'|'DBCS'|'EGCS') ['DATA'] 'BY' (identifier|literal)}+]
    ;

inspect_statement
    =
    'INSPECT' identifier 'TALLYING' {identifier 'FOR' {('CHARACTERS' {before_after_phrase}|('ALL'|'LEADING') {(identifier|literal) {before_after_phrase}}+)}+}+
    ;

inspect_statement
    =
    'INSPECT' identifier 'CONVERTING' (identifier|literal) 'TO' (identifier|literal) {before_after_phrase}
    ;

inspect_statement
    =
    'INSPECT' identifier 'TALLYING' {identifier 'FOR' {('CHARACTERS' {before_after_phrase}|('ALL'|'LEADING') {(identifier|literal) {before_after_phrase}}+)}+}+ 'REPLACING' {('CHARACTERS' 'BY' (identifier|literal) {before_after_phrase}|('ALL'|'LEADING'|'FIRST') {(identifier|literal) 'BY' (identifier|literal) {before_after_phrase}}+)}+
    ;

inspect_statement
    =
    'INSPECT' identifier 'REPLACING' {('CHARACTERS' 'BY' (identifier|literal) {before_after_phrase}|('ALL'|'LEADING'|'FIRST') {(identifier|literal) 'BY' (identifier|literal) {before_after_phrase}}+)}+
    ;

before_after_phrase
    =
    ('BEFORE'|'AFTER') ['INITIAL'] (identifier|literal)
    ;

merge_statement
    =
    'MERGE' file_name {['ON'] ('ASCENDING'|'DESCENDING') ['KEY'] {qualified_data_name}+}+ [['COLLATING'] 'SEQUENCE' ['IS'] alphabet_name] 'USING' file_name {file_name}+ ('OUTPUT' 'PROCEDURE' ['IS'] procedure_name [('THROUGH'|'THRU') procedure_name]|'GIVING' {file_name}+)
    ;

move_statement
    =
    'MOVE' (identifier|literal) 'TO' {identifier}+
    ;

move_statement
    =
    'MOVE' ('CORRESPONDING'|'CORR') identifier 'TO' {identifier}+
    ;

multiply_statement
    =
    'MULTIPLY' (identifier|literal) 'BY' {identifier ['ROUNDED']}+ [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-MULTIPLY']
    ;

multiply_statement
    =
    'MULTIPLY' (identifier|literal) 'BY' (identifier|literal) 'GIVING' {identifier ['ROUNDED']}+ [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-MULTIPLY']
    ;

open_statement
    =
    'OPEN' {('INPUT' {file_name [('REVERSED'|['WITH'] 'NO' 'REWIND')]}+|'OUTPUT' {file_name [['WITH'] 'NO' 'REWIND']}+|'I-O' {file_name}+|'EXTEND' {file_name}+)}+
    ;

open_statement
    =
    'OPEN' {('INPUT' {file_name}+|'OUTPUT' {file_name}+|'I-O' {file_name}+|'EXTEND' {file_name}+)}+
    ;

perform_statement
    =
    'PERFORM' (procedure_name [('THROUGH'|'THRU') procedure_name]|statement_list 'END-PERFORM')
    ;

perform_statement
    =
    'PERFORM' (procedure_name [('THROUGH'|'THRU') procedure_name] perform_varying_phrase perform_after_phrase|perform_varying_phrase statement_list 'END-PERFORM')
    ;

perform_statement
    =
    'PERFORM' (procedure_name [('THROUGH'|'THRU') procedure_name] (identifier|integer) 'TIMES'|(identifier|integer) 'TIMES' statement_list 'END-PERFORM')
    ;

perform_statement
    =
    'PERFORM' (procedure_name [('THROUGH'|'THRU') procedure_name] perform_until_phrase|perform_until_phrase statement_list 'END-PERFORM')
    ;

perform_until_phrase
    =
    [['WITH'] 'TEST' ('BEFORE'|'AFTER')] 'UNTIL' condition
    ;

perform_varying_phrase
    =
    [['WITH'] 'TEST' ('BEFORE'|'AFTER')] 'VARYING' (identifier|index_name) 'FROM' (identifier|index_name|literal) 'BY' (identifier|literal) 'UNTIL' condition
    ;

perform_after_phrase
    =
    {'AFTER' (identifier|index_name) 'FROM' (identifier|index_name|literal) 'BY' (identifier|literal) 'UNTIL' condition}
    ;

read_statement
    =
    'READ' file_name ['NEXT'] ['RECORD'] ['INTO' identifier] [['AT'] 'END' statement_list] ['NOT' ['AT'] 'END' statement_list] ['END-READ']
    ;

read_statement
    =
    'READ' file_name ['RECORD'] ['INTO' identifier] ['KEY' ['IS'] qualified_data_name] ['INVALID' ['KEY'] statement_list] ['NOT' 'INVALID' ['KEY'] statement_list] ['END-READ']
    ;

release_statement
    =
    'RELEASE' record_name ['FROM' identifier]
    ;

return_statement
    =
    'RETURN' file_name ['RECORD'] ['INTO' identifier] ['AT'] 'END' statement_list ['NOT' ['AT'] 'END' statement_list] ['END-RETURN']
    ;

rewrite_statement
    =
    'REWRITE' record_name ['FROM' identifier] ['INVALID' ['KEY'] statement_list] ['NOT' 'INVALID' ['KEY'] statement_list] ['END-REWRITE']
    ;

search_statement
    =
    'SEARCH' identifier ['VARYING' (identifier|index_name)] [['AT'] 'END' statement_list] {'WHEN' condition (statement_list|'NEXT' 'SENTENCE')}+ ['END-SEARCH']
    ;

search_statement
    =
    'SEARCH' 'ALL' identifier [['AT'] 'END' statement_list] 'WHEN' (qualified_data_name ['IS'] ('EQUAL' ['TO']|'=') (identifier|literal|arithmetic_expression)|condition_name_reference) {'AND' (qualified_data_name ['IS'] ('EQUAL' ['TO']|'=') (identifier|literal|arithmetic_expression)|condition_name_reference)} (statement_list|'NEXT' 'SENTENCE') ['END-SEARCH']
    ;

set_statement
    =
    'SET' {(index_name|identifier)}+ 'TO' (index_name|identifier|integer)
    ;

set_statement
    =
    'SET' {index_name}+ ('UP' 'BY'|'DOWN' 'BY') (identifier|integer)
    ;

set_statement
    =
    'SET' {{mnemonic_name}+ 'TO' ('ON'|'OFF')}+
    ;

set_statement
    =
    'SET' {condition_name_reference}+ 'TO' 'TRUE'
    ;

set_statement
    =
    'SET' {(identifier|'ADDRESS' 'OF' identifier)}+ 'TO' (identifier|'ADDRESS' 'OF' identifier|'NULL'|'NULLS')
    ;

sort_statement
    =
    'SORT' file_name {['ON'] ('ASCENDING'|'DESCENDING') ['KEY'] {qualified_data_name}+}+ [['WITH'] 'DUPLICATES' ['IN'] ['ORDER']] [['COLLATING'] 'SEQUENCE' ['IS'] alphabet_name] ('USING' {file_name}+|'INPUT' 'PROCEDURE' ['IS'] procedure_name [('THROUGH'|'THRU') procedure_name]) ('GIVING' {file_name}+|'OUTPUT' 'PROCEDURE' ['IS'] procedure_name [('THROUGH'|'THRU') procedure_name])
    ;

start_statement
    =
    'START' file_name ['KEY' ['IS'] ('EQUAL' ['TO']|'='|'GREATER' ['THAN']|'>'|'NOT' 'LESS' ['THAN']|'NOT' '<'|'GREATER' ['THAN'] 'OR' 'EQUAL' ['TO']|'>=') qualified_data_name] ['INVALID' ['KEY'] statement_list] ['NOT' 'INVALID' ['KEY'] statement_list] ['END-START']
    ;

stop_statement
    =
    'STOP' ('RUN'|literal)
    ;

string_statement
    =
    'STRING' {{(identifier|literal)}+ 'DELIMITED' ['BY'] (identifier|literal|'SIZE')}+ 'INTO' identifier [['WITH'] 'POINTER' identifier] [['ON'] 'OVERFLOW' statement_list] ['NOT' ['ON'] 'OVERFLOW' statement_list] ['END-STRING']
    ;

subtract_statement
    =
    'SUBTRACT' {(identifier|literal)}+ 'FROM' {identifier ['ROUNDED']}+ [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-SUBTRACT']
    ;

subtract_statement
    =
    'SUBTRACT' {(identifier|literal)}+ 'FROM' (identifier|literal) 'GIVING' {identifier ['ROUNDED']}+ [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-SUBTRACT']
    ;

subtract_statement
    =
    'SUBTRACT' ('CORRESPONDING'|'CORR') identifier 'FROM' identifier ['ROUNDED'] [['ON'] 'SIZE' 'ERROR' statement_list] ['NOT' ['ON'] 'SIZE' 'ERROR' statement_list] ['END-SUBTRACT']
    ;

unstring_statement
    =
    'UNSTRING' identifier ['DELIMITED' ['BY'] ['ALL'] (identifier|literal) {'OR' ['ALL'] (identifier|literal)}] 'INTO' {identifier ['DELIMITER' ['IN'] identifier] ['COUNT' ['IN'] identifier]}+ [['WITH'] 'POINTER' identifier] ['TALLYING' ['IN'] identifier] [['ON'] 'OVERFLOW' statement_list] ['NOT' ['ON'] 'OVERFLOW' statement_list] ['END-UNSTRING']
    ;

write_statement
    =
    'WRITE' record_name ['FROM' identifier] ([('BEFORE'|'AFTER') ['ADVANCING'] ((identifier|integer) [('LINE'|'LINES')]|mnemonic_name|'PAGE')] write_statement_phrase|['INVALID' ['KEY'] statement_list] ['NOT' 'INVALID' ['KEY'] statement_list]) ['END-WRITE']
    ;

write_statement
    =
    'WRITE' record_name ['FROM' identifier] ['INVALID' ['KEY'] statement_list] ['NOT' 'INVALID' ['KEY'] statement_list] ['END-WRITE']
    ;

write_statement
    =
    'WRITE' record_name ['FROM' identifier] ['END-WRITE']
    ;

write_statement_phrase
    =
    [['AT'] ('END-OF-PAGE'|'EOP') statement_list] ['NOT' ['AT'] ('END-OF-PAGE'|'EOP') statement_list]
    ;

compiler_directing_statement
    =
    (basis_statement|cbl_process_statement|control_cbl_statement|copy_statement|delete_compiler_directing_statement|eject_statement|enter_statement|insert_statement|ready_or_reset_trace_statement|replace_statement|replace_statement|service_label_statement|service_reload_statement|skip1_2_3_statement|title_statement|use_statement)
    ;

basis_statement
    =
    [sequence_number] 'BASIS' (basis_name|literal)
    ;

cbl_process_statement
    =
    ('CBL'|'PROCESS') [options_list]
    ;

control_cbl_statement
    =
    ('*CONTROL'|'*CBL') {('SOURCE'|'NOSOURCE'|'LIST'|'NOLIST'|'MAP'|'NOMAP')}+ ['.']
    ;

copy_statement
    =
    'COPY' (text_name|literal) [('OF'|'IN') (library_name|literal)] ['SUPPRESS'] ['REPLACING' {copy_operand 'BY' copy_operand}+] '.'
    ;

delete_compiler_directing_statement
    =
    [sequence_number] 'DELETE' sequence_number_field
    ;

eject_statement
    =
    'EJECT' ['.']
    ;

enter_statement
    =
    'ENTER' language_name [routine_name] '.'
    ;

insert_statement
    =
    [sequence_number] 'INSERT' sequence_number_field
    ;

ready_or_reset_trace_statement
    =
    ('READY'|'RESET') 'TRACE' '.'
    ;

replace_statement
    =
    'REPLACE' {quoted_pseudo_text 'BY' quoted_pseudo_text}+ '.'
    ;

replace_statement
    =
    'REPLACE' 'OFF' '.'
    ;

service_label_statement
    =
    'SERVICE' 'LABEL'
    ;

service_reload_statement
    =
    'SERVICE' 'RELOAD' identifier
    ;

skip_statement
    =
    ('SKIP1'|'SKIP2'|'SKIP3') ['.']
    ;

title_statement
    =
    'TITLE' literal ['.']
    ;

use_statement
    =
    'USE' ['GLOBAL'] 'AFTER' ['STANDARD'] ('EXCEPTION'|'ERROR') 'PROCEDURE' ['ON'] ({file_name}+|'INPUT'|'OUTPUT'|'I-O'|'EXTEND')
    ;

use_statement
    =
    'USE' ['GLOBAL'] 'AFTER' ['STANDARD'] [('BEGINNING'|'ENDING')] [('FILE'|'REEL'|'UNIT')] 'LABEL' 'PROCEDURE' ['ON'] ({file_name}+|'INPUT'|'OUTPUT'|'I-O'|'EXTEND')
    ;

use_statement
    =
    'USE' ['FOR'] 'DEGUGGING' ['ON'] ({procedure_name}+|'ALL' 'PROCEDURES')
    ;

condition
    =
    (combinable_condition|combined_conditions)
    ;

combinable_condition
    =
    (simple_condition|negated_simple_conditions|abbreviated_combined_relation_conditions)
    ;

simple_condition
    =
    (class_condition|condition_name_condition|relation_condition|sign_condition|switch_status_condition|'(' condition ')')
    ;

class_condition
    =
    identifier ['IS'] ['NOT'] ('NUMERIC'|'ALPHABETIC'|'ALPHABETIC-LOWER'|'ALPHABETIC-UPPER'|class_name|'DBCS'|'KANJI')
    ;

condition_name_condition
    =
    condition_name_reference
    ;

relation_condition
    =
    arithmetic_expression relational_operator arithmetic_expression
    ;

relational_operator
    =
    ['IS'] (['NOT'] ('GREATER' ['THAN']|'>'|'LESS' ['THAN']|'<'|'EQUAL' ['TO']|'=')|'GREATER' ['THAN'] 'OR' 'EQUAL' ['TO']|'>='|'LESS' ['THAN'] 'OR' 'EQUAL' ['TO']|'<' '=')
    ;

sign_condition
    =
    arithmetic_expression ['IS'] ['NOT'] ('POSITIVE'|'NEGATIVE'|'ZERO')
    ;

switch_status_condition
    =
    condition_name_reference
    ;

negated_simple_conditions
    =
    'NOT' condition
    ;

abbreviated_combined_relation_conditions
    =
    relation_condition abbreviation_rest
    ;

abbreviated_combined_relation_conditions
    =
    arithmetic_expression relational_operator '(' ['NOT'] arithmetic_expression abbreviation_rest ')'
    ;

abbreviated_combined_relation_conditions
    =
    arithmetic_expression '(' ['NOT'] relational_operator arithmetic_expression abbreviation_rest ')'
    ;

abbreviation_rest
    =
    {('AND'|'OR') ['NOT'] [relational_operator] abbreviation_leaf}+
    ;

abbreviation_leaf
    =
    (arithmetic_expression|'(' arithmetic_expression abbreviation_rest ')')
    ;

combined_conditions
    =
    combinable_condition {('AND'|'OR') combinable_condition}+
    ;

procedure_name
    =
    paragraph_name [('IN'|'OF') section_name]
    ;

procedure_name
    =
    section_name
    ;

identifier
    =
    qualified_data_name {'(' subscript ')'} ['(' leftmost_character_position ':' [length] ')']
    ;

identifier
    =
    'LINAGE-COUNTER' [('IN'|'OF') file_name]
    ;

qualified_data_name
    =
    data_name {('IN'|'OF') data_name} [('IN'|'OF') file_name]
    ;

qualified_data_name
    =
    special_register
    ;

length
    =
    arithmetic_expression
    ;

leftmost_character_position
    =
    arithmetic_expression
    ;

condition_name_reference
    =
    condition_name {('IN'|'OF') data_name} [('IN'|'OF') file_name] {'(' subscript ')'}
    ;

condition_name_reference
    =
    condition_name {('IN'|'OF') mnemonic_name}
    ;

subscript
    =
    {(integer|qualified_data_name [('+'|'-') integer]|index_name [('+'|'-') integer])}+
    ;

arithmetic_expression
    =
    times_div {('+'|'-') times_div}
    ;

times_div
    =
    power {('*'|'/') power}
    ;

power
    =
    [('+'|'-')] basis {'**' basis}
    ;

basis
    =
    (identifier|literal|'(' arithmetic_expression ')')
    ;

copy_operand
    =
    (quoted_pseudo_text|identifier|literal|cobol_word)
    ;

mode
    =
    ('F'|'V'|'U'|'S')
    ;

alphabet_name
    =
    alphabetic_user_defined_word
    ;

class_name
    =
    alphabetic_user_defined_word
    ;

condition_name
    =
    alphabetic_user_defined_word
    ;

data_name
    =
    alphabetic_user_defined_word
    ;

file_name
    =
    alphabetic_user_defined_word
    ;

index_name
    =
    alphabetic_user_defined_word
    ;

mnemonic_name
    =
    alphabetic_user_defined_word
    ;

record_name
    =
    qualified_data_name
    ;

routine_name
    =
    alphabetic_user_defined_word
    ;

symbolic_character
    =
    alphabetic_user_defined_word
    ;

library_name
    =
    user_defined_word
    ;

program_name
    =
    user_defined_word
    ;

text_name
    =
    user_defined_word
    ;

paragraph_name
    =
    user_defined_word
    ;

section_name
    =
    user_defined_word
    ;

computer_name
    =
    system_name
    ;

language_name
    =
    system_name
    ;

environment_name
    =
    system_name
    ;

assignment_name
    =
    system_name
    ;

basis_name
    =
    program_name
    ;

figurative_constant
    =
    ('ZERO'|'ZEROS'|'ZEROES'|'SPACE'|'SPACES'|'HIGH-VALUE'|'HIGH-VALUES'|'LOW-VALUE'|'LOW-VALUES'|'QUOTE'|'QUOTES'|'ALL' literal|'NULL'|'NULLS')
    ;

literal
    =
    (nonnumeric|numeric|dbcs|figurative_constant)
    ;

special_register
    =
    ('ADDRESS' 'OF' data_name|'DEBUG-ITEM'|'LENGTH' 'OF' identifier|'RETURN-CODE'|'SHIFT-OUT'|'SHIFT-IN'|'SORT-CONTROL'|'SORT-CORE-SIZE'|'SORT-FILE-SIZE'|'SORT-MESSAGE'|'SORT-MODE-SIZE'|'SORT-RETURN'|'TALLY'|'WHEN-COMPILED')
    ;

