
grammar = rules:{rule} ;

rule = rhs:(name:word '=' ! expre:expre) ('.' | ';') ! ;

expre = expre:option ;

option = first:sequence {'|' ! options:sequence} ;

sequence = elements:element {[','] elements:element} ;

element = named | term ;

named = name:word ':' value:term ;

term = term:(void | subexp | repeat | optional | special | atom) ; 

subexp = '(' ! exp:expre ')' ! ;

repeat = '{' ! exp:expre '}' ! plus:['-' | '+'] ! ;

optional = '[' ! optional:expre ']' ! ;

special = '?(' ! special:?/(.*)/? ')?' ! ;

atom = atom:(token | word | pattern) ;

token = token:('"' ?/([^"]|")*/? '"' | "'" ?/([^']|')*/? "'") ;

word = word:?/[-_A-Za-z0-9]/? ;

pattern = '?/' pattern:?/(.*?)(?=/\?)/? '/?' ;

void = '()' ;
