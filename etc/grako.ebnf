grammar = rules:{rule}+ <EOF> ;

rule = name:word '=' ! rhs:expre ('.' | ';') ! ;

expre = expre:choice ;

choice = options+:sequence {'|' ! options:sequence} ;

sequence = elements+:element {[','] elements:element} ;

element = element:(named | term) ;

named = name:word force_list:['+'] ':' value:term ;

term = term:(void | subexp | repeat | optional | special | atom) ;

subexp = '(' ! subexp:expre ')' ! ;

repeat = '{' ! repeat:expre '}' ! plus:['-' | '+'] ! ;

optional = '[' ! optional:expre ']' ! ;

special = '?(' ! special:?/(.*)/? ')?' ! ;

atom = atom:(cut | token | call | pattern | eof) ;

call = call:word ;

void = void:'()' ;

cut = cut:'!' ;

token = ('"' token:?/([^"]|\\")*/? '"' | "'" token:?/([^']|\\')*/? "'") ;

word = word:?/[-_A-Za-z0-9]+/? ;

pattern = '?/' ! pattern:?/(.*?)(?=/\?)/? '/?' ;

eof = '<EOF>' ;
