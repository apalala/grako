(*
 * This grammar defines the Grako variation of EBNF.
 *
 * Grako uses its own hand-written bootstrap parser, and this
 * grammar is only used for testing.
 *
 * See the accompanying README for details.
 *
 *)

grammar
    =
    @{rule}+
    $
    ;

rule
    =
    name:word '=' >> rhs:expre ('.' | ';') >>
    ;

expre
    =
      choice
    | sequence
    ;

choice
    =
    options+:sequence {'|' >> options:sequence}+
    ;

sequence
    =
    @element {[','] @element}
    ;

element
    =
      named
    | override
    | term
    ;

named
    =
    name:qualified [force_list:'+'] ':' value:element
    ;

override
    =
    '@' @element
    ;

term
    =
      void
    | subexp
    | repeat
    | optional
    | special
    | kif
    | knot
    | atom
    ;

subexp
    =
    '(' >> @expre ')' >>
    ;

repeat
    =
    '{' >> repeat:expre '}' >> plus:['-' | '+'] >>
    ;

optional
    =
    '[' >> @expre ']' >>
    ;

special
    =
    '?(' >> @?/(.*)/? ')?' >>
    ;

kif
    =
    '&' @term
    ;

knot
    =
    '!' @term
    ;

atom
    =
      cut
    | token
    | call
    | pattern
    | eof
    ;

call
    =
    word
    ;

void
    =
    '()'
    ;

cut
    =
    '>>'
    ;

token
    =
      '"' @?/([^"]|\\")*/? '"'
    | "'" @?/([^']|\\')*/? "'"
    ;

qualified
    =
    ?/[-_A-Za-z0-9]+(?:\.[-_A-Za-z0-9]+)*/?
    ;

word
    =
    ?/[-_A-Za-z0-9]+/?
    ;

pattern
    =
    '?/' >> @?/(.*?)(?=/\?)/? '/?'
    ;

eof
    =
    '$'
    ;
