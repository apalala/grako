
grammar = rules:{rule} ;

rule = name:word '=' ! expre:expre ('.'|';') ! ;

expre = expre:option ;

option = opts:sequence {'|' ! opts:sequence } ;

sequence = elements:element { [','] elements:element } ;

element = named | term ;

named = [ name:word ] term:term ;

term = term:(subexp | repeat | optional | special | atom) ; 

subexp = '(' ! exp:expre ')' ! ;

repeat = '{' !  exp:expre '}' ! plus:['-'|'+'] ! ;

optional = '[' ! optional:expre ']' ! ;

special = '?' ! exp:?/.*/? '?' ! ;

atom = exp:(token | word | pattern) ;

token = 
    token:(
    '"' ?/([^"]|\")*/?  '"' 
    | 
    "'" ?/([^']|\')*/?  "'" 
    ) 
    ;

word = word:?/[-_A-Za-z0-9]/? ;

pattern = '?/' pattern:?/.*/?   '/?' ;
