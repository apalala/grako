(*
 *
 * This grammar defines the Grako variation of EBNF.
 *
 *)


grammar
    =
    @:{rule}+ $
    ;

rule
    =
    name:new_name ~
    [
        '::'  params:params
    |
        '('  ~
            (
                kwparams:kwparams
            |
                params:params ','  kwparams:kwparams
            |
                params:params
            )
        ')'
    ]
    ['<'  base:known_name]
    '=' ~
    rhs:expre
    ';' ~
    ;

params
    =
    @+:literal {','  @+:literal}
    ;

kwparams
    =
    @+:pair {','  @+:pair}
    ;

pair
    =
    @+:word '='  @+:literal
    ;

expre
    =
      choice
    | sequence
    ;

choice
    =
    @+:sequence {'|'  @+:sequence}+
    ;

sequence
    =
    {element}+
    ;

element
    =
      rule_include
    | named_list
    | named
    | override_list
    | override
    | term
    ;

rule_include
    =
    '>'  @:known_name
    ;

named_list
    =
    name:name '+:' value:element
    ;

named
    =
    name:name ':' value:element
    ;

new_name
    =
    name ~
    ;

known_name
    =
    name ~
    ;

name
    =
    word
    ;

override_list
    =
    '@+:'  @:element
    ;

override
    =
    '@:'  @:element
    ;

term
    =
      void
    | group
    | positive_closure
    | closure
    | optional
    | special
    | kif
    | knot
    | atom
    ;

group
    =
    '('  @:expre ')' ~
    ;

positive_closure
    =
    '{'  @:expre '}' ('-' | '+')  ~
    ;

closure
    =
    '{' @:expre '}'  ['*'] ~
    ;

optional
    =
    '['  @:expre ']' ~
    ;

special
    =
    '?('  @:?/(.*)/? ')?' ~
    ;

kif
    =
    '&'  @:term
    ;

knot
    =
    '!'  @:term
    ;

atom
    =
      cut
    | token
    | call
    | pattern
    | eof
    ;

call
    =
    word
    ;

void
    =
    '()' ~
    ;

cut
    =
    '~' ~
    ;

literal
    =
      token
    | number
    | word
    ;

token
    =
      '"'  @:?/([^"\n]|\\"|\\\\)*/? '"'
    | "'"  @:?/([^'\n]|\\'|\\\\)*/? "'"
    ;

number
    =
    ?/[0-9]+/?
    ;

word
    =
    ?/[-_A-Za-z0-9]+/?
    ;

pattern
    =
    '?/'  @:?/(.*?)(?=/\?)/?? ?//\?+/?? ~
    ;

eof
    =
    '$' ~
    ;
