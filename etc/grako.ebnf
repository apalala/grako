grammar = rules:{rule}+ ;

rule = name:word '=' ! rhs:expre ('.' | ';') ! ;

expre = expre:option ;

option = options:sequence {'|' ! options:sequence} ;

sequence = elements:element {[','] elements:element} ;

element = element:(named | term) ;

named = name:word ':' value:term ;

term = term:(void | subexp | repeat | optional | special | atom) ;

subexp = '(' ! exp:expre ')' ! ;

repeat = '{' ! exp:expre '}' ! plus:['-' | '+'] ! ;

optional = '[' ! optional:expre ']' ! ;

special = '?(' ! special:?/(.*)/? ')?' ! ;

atom = atom:(cut | token | call | pattern) ;

call = word ;

void = '()' ;

cut = '!' ;

token = ('"' ?/([^"]|\\")*/? '"' | "'" ?/([^']|\\')*/? "'") ;

word = ?/[-_A-Za-z0-9]+/? ;

pattern = '?/' pattern:?/(.*?)(?=/\?)/? '/?' ;
