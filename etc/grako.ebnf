grammar = rules:{rule}+ $ ;

(* a comment *)

rule:rule = [ast_name:word ':'] name:word '=' >> rhs:expre ('.' | ';') >> ;

expre = expre:choice ;

choice = options+:sequence {'|' >> options:sequence} ;

sequence = elements+:element {[','] elements:element} ;

element = element:(named | term) ;

named = name:qualified force_list:['+'] ':' value:element ;

term = term:(void | subexp | repeat | optional | special | kif | knot | atom) ;

subexp = '(' >> subexp:expre ')' >> ;

repeat = '{' >> repeat:expre '}' >> plus:['-' | '+'] >> ;

optional = '[' >> optional:expre ']' >> ;

special = '?(' >> special:?/(.*)/? ')?' >> ;

kif =  '&' kif:term ;

knot = '!' knot:term ;

atom = atom:( cut | token | call | pattern | eof) ;


call = call:word ;

void = void:'()' ;

cut = cut:'>>' ;

token = ('"' token:?/([^"]|\\")*/? '"' | "'" token:?/([^']|\\')*/? "'") ;

qualified = qualified:?/[-_A-Za-z0-9]+(?:\.[-_A-Za-z0-9]+)*/? ;

word = word:?/[-_A-Za-z0-9]+/? ;

pattern = '?/' >> pattern:?/(.*?)(?=/\?)/? '/?' ;

eof = '$' ;
