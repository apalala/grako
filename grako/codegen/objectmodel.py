# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function, unicode_literals

from datetime import datetime

from grako.util import (
    re,
    safe_name,
    trim,
)
from grako.model import Node
from grako.exceptions import CodegenError
from grako.codegen.cgbase import ModelRenderer, CodeGenerator


def codegen(model):
    return ObjectModelCodeGenerator().render(model)


class ObjectModelCodeGenerator(CodeGenerator):
    def _find_renderer_class(self, item):
        if not isinstance(item, Node):
            return None

        name = item.__class__.__name__
        renderer = globals().get(name, None)
        if not renderer or not issubclass(renderer, ModelRenderer):
            raise CodegenError('Renderer for %s not found' % name)
        return renderer


class Grammar(ModelRenderer):
    @staticmethod
    def object_model_typename(rule):
        if not rule.params:
            return
        if not re.match('(?!\d)\w+', rule.params[0]):
            return
        if not rule.params[0][0].isupper():
            return
        return rule.params[0]

    def render_fields(self, fields):
        model_class_names = {
            self.object_model_typename(rule)
            for rule in self.node.rules
        }
        model_class_names = [oc for oc in model_class_names if oc is not None]

        class_template = trim(self.model_class_template)
        model_class_declarations = [
            class_template.format(name=safe_name(oc))
            for oc in model_class_names
        ]
        model_class_declarations = '\n\n\n'.join(model_class_declarations)

        version = datetime.now().strftime('%Y.%m.%d.%H')

        fields.update(
            model_class_declarations=model_class_declarations,
            version=version,
        )

    model_class_template = '''
            class {name}(ModelBase):
                pass\
            '''

    template = '''\
                #!/usr/bin/env python
                # -*- coding: utf-8 -*-

                # CAVEAT UTILITOR
                #
                # This file was automatically generated by Grako.
                #
                #    https://pypi.python.org/pypi/grako/
                #
                # Any changes you make to it will be overwritten the next time
                # the file is generated.

                from __future__ import print_function, division, absolute_import, unicode_literals

                from grako.model import Node
                from grako.model import ModelBuilderSemantics


                __version__ = '{version}'


                class {name}ModelBuilderSemantics(ModelBuilderSemantics):
                    def __init__(self):
                        types = [
                            t for t in globals().values()
                            if issubclass(t, ModelBase)
                        ]
                        super({name}ModelBuilderSemantics, self).__init__(types=types)


                class ModelBase(Node):
                    pass


                {model_class_declarations}\
                '''
